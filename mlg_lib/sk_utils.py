#AUTOGENERATED! DO NOT EDIT! File to edit: dev/10_sk_utils.ipynb (unless otherwise specified).

__all__ = ['LambdaRow']

#Cell

from typing import Callable

import numpy as np
from numpy.core._multiarray_umath import ndarray
from sklearn.base import TransformerMixin, BaseEstimator


class LambdaRow(TransformerMixin, BaseEstimator):
    """

    Apply a function on each row of the numpy array

    """

    def __init__(self,
                 row_func: Callable[[ndarray], ndarray],
                 to_features: bool = False,
                 **kwargs):
        """Constructor for LambdaRow"""
        self.func = row_func
        self.func_kwargs = kwargs
        self.to_features = to_features

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        _arr = np.array([self.func(x, **self.func_kwargs) for x in X])
        if len(_arr.shape)>=2:
            if self.to_features:
                N = _arr.shape[0]
                return _arr.reshape(N,-1)
            else:
                return _arr
        else:
            return _arr.reshape(-1,1)

    def fit_transform(self, X, y=None, **fit_params):
        return self.fit(X).transform(X)

    def get_params(self, deep=True):
        return dict(list(self.func_kwargs.items())+[("row_func", self.func)])

    def set_params(self, **params):
        # params.pop("row_func")
        self.func_kwargs.update(params)
        return self