#AUTOGENERATED! DO NOT EDIT! File to edit: dev/18_imfeat.ipynb (unless otherwise specified).

__all__ = ['HogFactory', 'DaisyFactory', 'flatten', 'LBPFactory']

#Cell

from skimage.feature import hog
import attr
from typing import Tuple
import numpy as np

@attr.s
class HogFactory(object):

    orientations=attr.ib(type=int, default=8)
    pixels_per_cell=attr.ib(type=Tuple[int,int], default=(8, 8))
    cells_per_block=attr.ib(type=Tuple[int,int], default=(1, 1))
    multichannel=attr.ib(type=bool, default=False)

    def __call__(self, arr: np.ndarray)->np.ndarray:
        return hog(arr,
               orientations=self.orientations,
               pixels_per_cell=self.pixels_per_cell,
               cells_per_block=self.cells_per_block,
               block_norm="L2",
               transform_sqrt=True,
               feature_vector=True,
               multichannel=self.multichannel
                  )

#Cell

from skimage.feature import daisy
import attr
from typing import Tuple
import numpy as np

@attr.s
class DaisyFactory(object):

    step=attr.ib(type=int, default=8)
    radius=attr.ib(type=int, default=8)
    rings=attr.ib(type=int, default=2)
    histograms=attr.ib(type=int, default=6)
    orientations=attr.ib(type=int, default=8)

    def __call__(self, arr: np.ndarray)->np.ndarray:
        return daisy(arr, step=self.step, radius=self.radius, rings=self.rings, histograms=self.histograms,
                         orientations=self.orientations).flatten()

#Cell

from numpy import ndarray

def flatten(arr: ndarray)->ndarray:
    return arr.flatten()

#Cell

from skimage.feature import local_binary_pattern
import attr
from typing import Tuple
import numpy as np

@attr.s
class LBPFactory(object):

    radius=attr.ib(type=int, default=8)

    def __call__(self, arr: np.ndarray)->np.ndarray:
        return local_binary_pattern(arr, 8*self.radius, self.radius, "uniform").flatten()
